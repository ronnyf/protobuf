// swift-tools-version:5.6

import PackageDescription

let package = Package(
	name: "protobuf",
	platforms: [
		.iOS(.v12),
		.macOS(.v10_13),
		.macCatalyst(.v13),
		.watchOS(.v5),
		.tvOS(.v11)
	],
	products: [
		.library(
			name: "libprotobuf",
			targets: [
				"protobuf",
			]),
		.library(
			name: "libprotobuf-lite",
			targets: [
				"protobuf_lite",
			]),
		.executable(
			name: "protoc",
			targets: [
				"protoc", "libprotoc", "protobuf",
			])
	],
	dependencies: [
		.package(url: "https://github.com/ronnyf/abseil-cpp.git", .upToNextMinor(from: "1.0.5")),
		.package(url: "https://github.com/ronnyf/jsoncpp.git", .upToNextMajor(from: "1.9.6")),
		.package(url: "https://github.com/ronnyf/utf8_range.git", .upToNextMajor(from: "1.0.3")),
		.package(url: "https://github.com/ronnyf/googletest.git", .upToNextMajor(from: "1.0.0")),
	],
	targets: [
		.executableTarget(
			name: "protoc",
			dependencies: [
				"libprotoc",
			],
			path: "src",
			sources: [
				"google/protobuf/compiler/main.cc",
			],
			cSettings: [
				.headerSearchPath(".")
			]
		),
		.target(
			name: "libprotoc",
			dependencies: [
				.product(name: "libabsl", package: "abseil-cpp"),
				.product(name: "libjsoncpp", package: "jsoncpp"),
				.product(name: "utf8_validity", package: "utf8_range"),
				"protobuf",
			],
			path: "src/google/protobuf",
			sources: [
				"compiler/allowlists/editions.cc",
				"compiler/allowlists/empty_package.cc",
				"compiler/allowlists/open_enum.cc",
				"compiler/allowlists/unused_imports.cc",
				"compiler/allowlists/weak_imports.cc",
				"compiler/code_generator.cc",
				"compiler/command_line_interface.cc",
				"compiler/cpp/enum.cc",
				"compiler/cpp/extension.cc",
				"compiler/cpp/field.cc",
				"compiler/cpp/field_generators/cord_field.cc",
				"compiler/cpp/field_generators/enum_field.cc",
				"compiler/cpp/field_generators/map_field.cc",
				"compiler/cpp/field_generators/message_field.cc",
				"compiler/cpp/field_generators/primitive_field.cc",
				"compiler/cpp/field_generators/string_field.cc",
				"compiler/cpp/file.cc",
				"compiler/cpp/generator.cc",
				"compiler/cpp/helpers.cc",
				"compiler/cpp/message.cc",
				"compiler/cpp/padding_optimizer.cc",
				"compiler/cpp/parse_function_generator.cc",
				"compiler/cpp/service.cc",
				"compiler/cpp/tracker.cc",
				"compiler/csharp/csharp_doc_comment.cc",
				"compiler/csharp/csharp_enum.cc",
				"compiler/csharp/csharp_enum_field.cc",
				"compiler/csharp/csharp_field_base.cc",
				"compiler/csharp/csharp_generator.cc",
				"compiler/csharp/csharp_helpers.cc",
				"compiler/csharp/csharp_map_field.cc",
				"compiler/csharp/csharp_message.cc",
				"compiler/csharp/csharp_message_field.cc",
				"compiler/csharp/csharp_primitive_field.cc",
				"compiler/csharp/csharp_reflection_class.cc",
				"compiler/csharp/csharp_repeated_enum_field.cc",
				"compiler/csharp/csharp_repeated_message_field.cc",
				"compiler/csharp/csharp_repeated_primitive_field.cc",
				"compiler/csharp/csharp_source_generator_base.cc",
				"compiler/csharp/csharp_wrapper_field.cc",
				"compiler/csharp/names.cc",
				"compiler/java/context.cc",
				"compiler/java/doc_comment.cc",
				"compiler/java/enum.cc",
				"compiler/java/enum_field.cc",
				"compiler/java/enum_field_lite.cc",
				"compiler/java/enum_lite.cc",
				"compiler/java/extension.cc",
				"compiler/java/extension_lite.cc",
				"compiler/java/field.cc",
				"compiler/java/file.cc",
				"compiler/java/generator.cc",
				"compiler/java/generator_factory.cc",
				"compiler/java/helpers.cc",
				"compiler/java/java_features.pb.cc",
				"compiler/java/kotlin_generator.cc",
				"compiler/java/map_field.cc",
				"compiler/java/map_field_lite.cc",
				"compiler/java/message.cc",
				"compiler/java/message_builder.cc",
				"compiler/java/message_builder_lite.cc",
				"compiler/java/message_field.cc",
				"compiler/java/message_field_lite.cc",
				"compiler/java/message_lite.cc",
				"compiler/java/message_serialization.cc",
				"compiler/java/name_resolver.cc",
				"compiler/java/names.cc",
				"compiler/java/primitive_field.cc",
				"compiler/java/primitive_field_lite.cc",
				"compiler/java/service.cc",
				"compiler/java/shared_code_generator.cc",
				"compiler/java/string_field.cc",
				"compiler/java/string_field_lite.cc",
				"compiler/objectivec/enum.cc",
				"compiler/objectivec/enum_field.cc",
				"compiler/objectivec/extension.cc",
				"compiler/objectivec/field.cc",
				"compiler/objectivec/file.cc",
				"compiler/objectivec/generator.cc",
				"compiler/objectivec/helpers.cc",
				"compiler/objectivec/import_writer.cc",
				"compiler/objectivec/line_consumer.cc",
				"compiler/objectivec/map_field.cc",
				"compiler/objectivec/message.cc",
				"compiler/objectivec/message_field.cc",
				"compiler/objectivec/names.cc",
				"compiler/objectivec/oneof.cc",
				"compiler/objectivec/primitive_field.cc",
				"compiler/objectivec/text_format_decode_data.cc",
				"compiler/php/names.cc",
				"compiler/php/php_generator.cc",
				"compiler/plugin.cc",
				"compiler/plugin.pb.cc",
				"compiler/python/generator.cc",
				"compiler/python/helpers.cc",
				"compiler/python/pyi_generator.cc",
				"compiler/retention.cc",
				"compiler/ruby/ruby_generator.cc",
				"compiler/rust/accessors/accessors.cc",
				"compiler/rust/accessors/singular_message.cc",
				"compiler/rust/accessors/singular_scalar.cc",
				"compiler/rust/accessors/singular_string.cc",
				"compiler/rust/accessors/unsupported_field.cc",
				"compiler/rust/context.cc",
				"compiler/rust/generator.cc",
				"compiler/rust/message.cc",
				"compiler/rust/naming.cc",
				"compiler/rust/oneof.cc",
				"compiler/rust/relative_path.cc",
				"compiler/subprocess.cc",
				"compiler/zip_writer.cc",
			],
			publicHeadersPath: "include/libprotoc_hdrs",
			cSettings: [
				.define("HAVE_ZLIB")
			],
			linkerSettings: [
				.linkedLibrary("z")
			]
		),
		.target(
			name: "protobuf_lite",
			dependencies: [
				.product(name: "libabsl", package: "abseil-cpp"),
				.product(name: "libjsoncpp", package: "jsoncpp"),
				.product(name: "utf8_validity", package: "utf8_range"),
			],
			path: "src/google/protobuf",
			sources: [
				"any_lite.cc",
				"arena.cc",
				"arena_align.cc",
				"arenastring.cc",
				"arenaz_sampler.cc",
				"extension_set.cc",
				"generated_enum_util.cc",
				"generated_message_tctable_lite.cc",
				"generated_message_util.cc",
				"implicit_weak_message.cc",
				"inlined_string_field.cc",
				"io/coded_stream.cc",
				"io/io_win32.cc",
				"io/zero_copy_stream.cc",
				"io/zero_copy_stream_impl.cc",
				"io/zero_copy_stream_impl_lite.cc",
				"map.cc",
				"message_lite.cc",
				"parse_context.cc",
				"port.cc",
				"raw_ptr.cc",
				"repeated_field.cc",
				"repeated_ptr_field.cc",
				"stubs/common.cc",
				"wire_format_lite.cc",
			],
			publicHeadersPath: "include/libprotobuf_lite_hdrs",
			cSettings: [
				.define("HAVE_ZLIB")
			],
			linkerSettings: [
				.linkedLibrary("z")
			]
		),
		.target(
			name: "protobuf",
			dependencies: [
				.product(name: "libabsl", package: "abseil-cpp"),
				.product(name: "libjsoncpp", package: "jsoncpp"),
				.product(name: "utf8_validity", package: "utf8_range"),
				"protobuf_lite",
			],
			path: "src/google/protobuf",
			sources: [
				"any.pb.cc",
				"api.pb.cc",
				"duration.pb.cc",
				"empty.pb.cc",
				"field_mask.pb.cc",
				"source_context.pb.cc",
				"struct.pb.cc",
				"timestamp.pb.cc",
				"type.pb.cc",
				"wrappers.pb.cc",
				"any.cc",
				"compiler/importer.cc",
				"compiler/parser.cc",
				"cpp_features.pb.cc",
				"descriptor.cc",
				"descriptor.pb.cc",
				"descriptor_database.cc",
				"dynamic_message.cc",
				"extension_set_heavy.cc",
				"feature_resolver.cc",
				"generated_message_bases.cc",
				"generated_message_reflection.cc",
				"generated_message_tctable_full.cc",
				"generated_message_tctable_gen.cc",
				"internal_message_util.cc",
				"io/gzip_stream.cc",
				"io/printer.cc",
				"io/strtod.cc",
				"io/tokenizer.cc",
				"io/zero_copy_sink.cc",
				"json/internal/lexer.cc",
				"json/internal/message_path.cc",
				"json/internal/parser.cc",
				"json/internal/unparser.cc",
				"json/internal/untyped_message.cc",
				"json/internal/writer.cc",
				"json/internal/zero_copy_buffered_stream.cc",
				"json/json.cc",
				"map_field.cc",
				"message.cc",
				"reflection_mode.cc",
				"reflection_ops.cc",
				"service.cc",
				"text_format.cc",
				"unknown_field_set.cc",
				"util/delimited_message_util.cc",
				"util/field_comparator.cc",
				"util/field_mask_util.cc",
				"util/message_differencer.cc",
				"util/time_util.cc",
				"util/type_resolver_util.cc",
				"wire_format.cc",
			],
			publicHeadersPath: "include/libprotobuf_hdrs",
			cSettings: [
				.define("HAVE_ZLIB")
			],
			linkerSettings: [
				.linkedLibrary("z")
			]
		),
		.testTarget(
			name: "common_tests",
			dependencies: [
				"libprotoc",
				.product(name: "googletest", package: "googletest"),
				.product(name: "googlemock", package: "googletest"),
			],
			path: "src",
			sources: [
				"google/protobuf/compiler/mock_code_generator.cc",
				"google/protobuf/testing/file.cc",
				"google/protobuf/testing/googletest.cc",
			],
			cSettings: [
				.headerSearchPath(".")
			]
		)
	],
	cLanguageStandard: .gnu11,
	cxxLanguageStandard: .gnucxx20
)
